<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tony自留地</title>
    <link>https://chaoswong1981.github.io/post/</link>
    <description>Recent content in Posts on Tony自留地</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 22 Jun 2024 20:22:13 +0800</lastBuildDate>
    <atom:link href="https://chaoswong1981.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ARTS02.最大公约数</title>
      <link>https://chaoswong1981.github.io/post/arts02.%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</link>
      <pubDate>Sat, 22 Jun 2024 20:22:13 +0800</pubDate>
      <guid>https://chaoswong1981.github.io/post/arts02.%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</guid>
      <description>Algorithm 1768. 交替合并字符串 思路： 我的思路其实是很“大白话”的解释： 同时遍历两个字符串 每个字符串都是从头开始取，作为因子 然后检查这个因子是否能够整除整</description>
    </item>
    <item>
      <title>ARTS01.打卡第一天</title>
      <link>https://chaoswong1981.github.io/post/arts01.%E6%89%93%E5%8D%A1%E7%AC%AC%E4%B8%80%E5%A4%A9/</link>
      <pubDate>Thu, 13 Jun 2024 14:23:23 +0800</pubDate>
      <guid>https://chaoswong1981.github.io/post/arts01.%E6%89%93%E5%8D%A1%E7%AC%AC%E4%B8%80%E5%A4%A9/</guid>
      <description>Algorithm 1768. 交替合并字符串 思路： 这道题我认为考察的是对边界值的处理。 因为两个字符串不一样长，所以基本思路是： 比较两个字符串的长度，按短的进行遍历 遍历</description>
    </item>
    <item>
      <title>ARTS打卡计划</title>
      <link>https://chaoswong1981.github.io/post/arts%E6%89%93%E5%8D%A1%E8%AE%A1%E5%88%92/</link>
      <pubDate>Wed, 12 Jun 2024 18:12:25 +0800</pubDate>
      <guid>https://chaoswong1981.github.io/post/arts%E6%89%93%E5%8D%A1%E8%AE%A1%E5%88%92/</guid>
      <description>Algorithm 每周至少做一个 Leetcode 的算法题。主要是为了编程训练和学习。如果不训练你看再多的算法书，你依然不会做算法题。关于做 Leetcode 的优势，你可以看一下我在 coolshell 上的</description>
    </item>
    <item>
      <title>比较通用的创建python扩展的方法</title>
      <link>https://chaoswong1981.github.io/post/%E6%AF%94%E8%BE%83%E9%80%9A%E7%94%A8%E7%9A%84%E5%88%9B%E5%BB%BApython%E6%89%A9%E5%B1%95%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 27 Feb 2022 20:37:51 +0800</pubDate>
      <guid>https://chaoswong1981.github.io/post/%E6%AF%94%E8%BE%83%E9%80%9A%E7%94%A8%E7%9A%84%E5%88%9B%E5%BB%BApython%E6%89%A9%E5%B1%95%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>1. 创建c文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include &amp;#34;python.h&amp;#34; #include &amp;#34;stdio.h&amp;#34; static PyObject *testmod(PyObject *self, PyObject *args) { printf(&amp;#34;this is c function &amp;#39;testmod&amp;#39;\n&amp;#34;); return PyLong_FromLong(0); } static PyMethodDef mymod_funcs[] = { {&amp;#34;testmod&amp;#34;, testmod, METH_NOARGS, &amp;#34;testmod function.&amp;#34;}, {0,0,0,0} }; static PyModuleDef mymod_module = { PyModuleDef_HEAD_INIT, &amp;#34;mymod&amp;#34;, &amp;#34;mymod</description>
    </item>
    <item>
      <title>开篇-Hugo基本使用</title>
      <link>https://chaoswong1981.github.io/post/%E5%BC%80%E7%AF%87-hugo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 19 Feb 2022 17:53:14 +0800</pubDate>
      <guid>https://chaoswong1981.github.io/post/%E5%BC%80%E7%AF%87-hugo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>网上讲hugo怎么用的着实很多了，所以我只记录自己第一次折腾hugo的步骤。 0x0. 准备工作 在github上建一个这样的仓库：.github.io</description>
    </item>
  </channel>
</rss>
